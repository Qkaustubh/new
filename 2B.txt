#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

void displayArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n;

    // Get the size of the array from the user
    printf("Enter the size of the array: ");
    if (scanf("%d", &n) != 1) {
        fprintf(stderr, "Error: Failed to read the size of the array.\n");
        exit(EXIT_FAILURE);
    }

    int arr[n];

    // Get the elements of the array from the user
    printf("Enter %d elements for the array:\n", n);
    for (int i = 0; i < n; i++) {
        if (scanf("%d", &arr[i]) != 1) {
            fprintf(stderr, "Error: Failed to read element %d of the array.\n", i + 1);
            exit(EXIT_FAILURE);
        }
    }

    // Fork a new process
    pid_t pid = fork();

    if (pid == -1) {
        // Error handling
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process

        // Convert array elements to strings for passing as command line arguments
        char *args[n + 2]; // n elements + program name + NULL
        args[0] = "./display_reverse";
        for (int i = 0; i < n; i++) {
            args[i + 1] = malloc(12); // Assuming max length of integer is 11
            sprintf(args[i + 1], "%d", arr[i]);
        }
        args[n + 1] = NULL;

        // Execute the display_reverse program
        execve("./display_reverse", args, NULL);

        // execve only returns if an error occurs
        perror("Execve failed");
        exit(EXIT_FAILURE);
    } else {
        // Parent process

        // Wait for the child process to finish
        wait(NULL);

        // Sort the array in ascending order
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap the elements if they are in the wrong order
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        // Display the sorted array
        printf("Sorted Array: ");
        displayArray(arr, n);
    }

    return 0;
}

/*Reverse Order
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    // Display the array in reverse order
    printf("Array in Reverse Order: ");
    for (int i = argc - 1; i > 0; i--) {
        printf("%s ", argv[i]);
    }
    printf("\n");

    return 0;
}
*/